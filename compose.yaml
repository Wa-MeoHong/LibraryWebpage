version: '3.7'



services:
  db:
    image: 'mysql:8.0'
    container_name: librarydb # Container 이름 지정
    environment:
      - 'MYSQL_DATABASE=Mysql_LibraryDB'
      - 'MYSQL_ROOT_PASSWORD=dev2132'
      - 'MySQL_ROOT_HOST=%'
    ports:    # 포트번호 지정 ( Port forwarding )
      - '50000:3306'
    # MYSQL에 적용되는 커맨드
    command:
      - --default-authentication-plugin=mysql_native_password # 보안 방식은 비밀번호 방식
      - --character-set-server=utf8mb4        # 문장방식을 UTF-8 MB4 방식을 이용(이모지까지 표현가능)
      - --collation-server=utf8mb4_unicode_ci
      - --character-set-client-handshake
    volumes:
      - C:/Users/deaho/OneDrive/바탕 화면/Mysql_LibraryDB/test/mysql/data:/var/lib/mysql    # DB 볼륨 처리
    networks:
      - library_network # docker container끼리 통신을 하기 위해, network를 설정해야만함. 모두 같은 이름으로 해야한다.
    restart: always

  webapp:
    build:    # 이미지는 dockerfile 기반으로 한다.
      context: .  # dockerfile이 있는 디렉토리
      dockerfile: Dockerfile  # 기존의 Dockerfile을 사용한다. build된 jar를 사용
    restart: always       # 컨테이너는 전원이 꺼졌다가 켜지면 재실행된다.
    depends_on:
      - db      # DB가 실행된 이후에 WebApp이 실행되도록 설정함.
    ports:
      - 8080:8080 # 포트번호는 8080으로 설정한다.
    container_name: library_app
    environment:  # 환경 설정( DB 연결 및 profiles 지정)
      SPRING_DATASOURCE_URL: jdbc:mysql://db:50000/Library_db?ServerTimezone=Asia/Seoul&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: dev2132
      SPRING_PROFILES_ACTIVE: dev  # 사용할 프로파일 지정
    networks:
      - library_network # docker container끼리 통신을 하기 위해, network를 설정해야만함. 모두 같은 이름으로 해야한다.
networks:   #  네트워크 설정
  library_network:
